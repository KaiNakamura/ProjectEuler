package com.kainakamura.problem012;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 *
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 {
    protected static int highlyDivisibleTriangularNumber(int n) {
        int triangleNumber = 1;
        int increment = 2;

        while (numDivisors(triangleNumber) < n) {
            triangleNumber += increment;
            increment++;
        }

        return triangleNumber;
    }

    protected static int numDivisors(int n) {
        // If n is less than or equal to 1, it has one divisor, otherwise 2
        int numDivisors = n <= 1 ? 1 : 2;
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                // Add one divisor if perfect square, otherwise add 2
                numDivisors += i * i == n ? 1 : 2;
            }
        }
        return numDivisors;
    }

    public static void main(String[] args) {
        System.out.println(highlyDivisibleTriangularNumber(5));
        System.out.println(highlyDivisibleTriangularNumber(500));
    }
}
